document.addEventListener('DOMContentLoaded', () => {
    // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
    const gameBoard = document.getElementById('game-board');
    const movesElement = document.getElementById('moves');
    const timerElement = document.getElementById('timer');
    const pairsElement = document.getElementById('pairs');
    const startBtn = document.getElementById('start-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resetLeaderboardBtn = document.getElementById('reset-leaderboard-btn');
    const playerForm = document.getElementById('player-form');
    const playerNameInput = document.getElementById('player-name');
    const saveScoreBtn = document.getElementById('save-score-btn');
    const leaderboardBody = document.getElementById('leaderboard-body');
    const winnerBanner = document.getElementById('winner-banner');
    const passwordModal = document.getElementById('password-modal');
    const passwordInput = document.getElementById('password-input');
    const confirmResetBtn = document.getElementById('confirm-reset-btn');
    const cancelResetBtn = document.getElementById('cancel-reset-btn');
    
    // –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü–µ–π URL –Ω–∞ URL –∑ –≤–∞—à–æ–≥–æ Google Apps Script
    const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyhO7X3sTAJAD3pG8HNCX2RB0jUB_4Xp8IEsLvRrCJyoHIT3rer7T5HLt19ET2ULCROXA/exec';
    
    // –ú–æ—Ä—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ–∫
    const symbols = ['üê†', 'üêü', 'üê°', 'ü¶Ä', 'üêô', 'üê¨', 'ü¶à', 'üêã', 
                    '‚öì', 'üõ•', 'üåä', 'üêö', 'üèù', 'ü§ø', 'üåÖ', 'üßú'];
    
    // –ó–º—ñ–Ω–Ω—ñ –≥—Ä–∏
    let cards = [];
    let flippedCards = [];
    let matchedCards = [];
    let moves = 0;
    let timer = 0;
    let timerInterval;
    let gameStarted = false;
    let totalPairs = 8;
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    let leaderboard = JSON.parse(localStorage.getItem('memoryLeaderboard')) || [];
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
    function displayLeaderboard() {
        leaderboardBody.innerHTML = '';
        
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º (–º–µ–Ω—à–µ = –∫—Ä–∞—â–µ)
        const sortedLeaderboard = [...leaderboard].sort((a, b) => {
  if (a.time === b.time) {
    return a.moves - b.moves; // –ø—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤–æ–º—É —á–∞—Å—ñ - –º–µ–Ω—à–µ —Ö–æ–¥—ñ–≤ –∫—Ä–∞—â–µ
  }
  return a.time - b.time; // –º–µ–Ω—à–∏–π —á–∞—Å –∫—Ä–∞—â–µ
});
        
        sortedLeaderboard.forEach((player, index) => {
            const row = document.createElement('tr');
            
            if (index === 0) {
                row.classList.add('first-place', 'glow');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${player.name} <span class="cups">üèÜ</span></td>
                    <td>${player.time} —Å–µ–∫</td>
                    <td>${player.moves}</td>
                `;
            } else {
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${player.name}</td>
                    <td>${player.time} —Å–µ–∫</td>
                    <td>${player.moves}</td>
                `;
            }
            
            leaderboardBody.appendChild(row);
        });
    }
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    async function saveScore(name, time, moves) {
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
        const existingPlayerIndex = leaderboard.findIndex(player => player.name === name);
        
        if (existingPlayerIndex !== -1) {
            const player = leaderboard[existingPlayerIndex];
            
            if (time < player.bestTime) {
                player.bestTime = time;
                player.time = time;
                player.moves = moves;
                if (isFirstPlace(time)) {
                    player.cups += 1;
                }
            }
        } else {
            leaderboard.push({
                name,
                time,
                moves,
                bestTime: time,
                cups: isFirstPlace(time) ? 1 : 0
            });
        }
        
        localStorage.setItem('memoryLeaderboard', JSON.stringify(leaderboard));
        displayLeaderboard();
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –æ–Ω–ª–∞–π–Ω-–±–∞–∑—É
        try {
            await fetch(SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'saveScore',
                    name: name,
                    time: time,
                    moves: moves
                })
            });
            console.log('–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –æ–Ω–ª–∞–π–Ω-–±–∞–∑—É:', error);
        }
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∑ –æ–Ω–ª–∞–π–Ω-–±–∞–∑–∏
    async function loadOnlineLeaderboard() {
        try {
            const response = await fetch(`${SCRIPT_URL}?action=getScores&t=${new Date().getTime()}`);
            const onlineLeaderboard = await response.json();
            
            if (onlineLeaderboard && onlineLeaderboard.length > 0) {
                leaderboard = onlineLeaderboard;
                localStorage.setItem('memoryLeaderboard', JSON.stringify(leaderboard));
                displayLeaderboard();
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ–Ω–ª–∞–π–Ω-–±–∞–∑–∏:', error);
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —î –ø–µ—Ä—à–∏–º –º—ñ—Å—Ü–µ–º
    function isFirstPlace(time) {
        if (leaderboard.length === 0) return true;
        const bestTime = Math.min(...leaderboard.map(player => player.bestTime));
        return time < bestTime;
    }
    
    // –°–∫–∏–¥–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
    function resetLeaderboard() {
        leaderboard = [];
        localStorage.removeItem('memoryLeaderboard');
        displayLeaderboard();
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
    function initGame() {
        gameBoard.innerHTML = '';
        flippedCards = [];
        matchedCards = [];
        moves = 0;
        timer = 0;
        movesElement.textContent = moves;
        timerElement.textContent = timer;
        pairsElement.textContent = `0/${totalPairs}`;
        winnerBanner.style.display = 'none';
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä —Å–∏–º–≤–æ–ª—ñ–≤
        let gameSymbols = symbols.slice(0, totalPairs);
        gameSymbols = [...gameSymbols, ...gameSymbols];
        
        // –ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤
        gameSymbols.sort(() => Math.random() - 0.5);
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
        cards = gameSymbols.map((symbol, index) => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.dataset.index = index;
            card.dataset.symbol = symbol;
            
            const cardFront = document.createElement('div');
            cardFront.classList.add('card-front');
            cardFront.textContent = symbol;
            
            const cardBack = document.createElement('div');
            cardBack.classList.add('card-back');
            
            card.appendChild(cardFront);
            card.appendChild(cardBack);
            
            card.addEventListener('click', () => flipCard(card));
            
            gameBoard.appendChild(card);
            return card;
        });
    }
    
    // –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
    function flipCard(card) {
        if (!gameStarted) return;
        if (flippedCards.length === 2 || card.classList.contains('flipped') || matchedCards.includes(card)) return;
        
        card.classList.add('flipped');
        flippedCards.push(card);
        
        if (flippedCards.length === 2) {
            moves++;
            movesElement.textContent = moves;
            
            setTimeout(checkMatch, 700);
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–±—ñ–≥
    function checkMatch() {
        const [card1, card2] = flippedCards;
        if (card1.dataset.symbol === card2.dataset.symbol) {
            matchedCards.push(card1, card2);
            pairsElement.textContent = `${matchedCards.length/2}/${totalPairs}`;
            
            if (matchedCards.length === cards.length) {
                clearInterval(timerInterval);
                playerForm.style.display = 'block';
                winnerBanner.style.display = 'block';
            }
        } else {
            card1.classList.remove('flipped');
            card2.classList.remove('flipped');
        }
        
        flippedCards = [];
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    function startTimer() {
        clearInterval(timerInterval);
        timer = 0;
        timerElement.textContent = timer;
        
        timerInterval = setInterval(() => {
            timer++;
            timerElement.textContent = timer;
        }, 1000);
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    startBtn.addEventListener('click', () => {
        gameStarted = true;
        initGame();
        startTimer();
        playerForm.style.display = 'none';
        startBtn.disabled = true;
    });
    
    resetBtn.addEventListener('click', () => {
        clearInterval(timerInterval);
        gameStarted = false;
        initGame();
        playerForm.style.display = 'none';
        winnerBanner.style.display = 'none';
        startBtn.disabled = false;
    });
    
    resetLeaderboardBtn.addEventListener('click', () => {
        passwordModal.style.display = 'flex';
    });
    
    confirmResetBtn.addEventListener('click', () => {
        if (passwordInput.value === '1357924680') {
            resetLeaderboard();
            passwordModal.style.display = 'none';
            passwordInput.value = '';
            alert('–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ!');
        } else {
            alert('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
    });
    
    cancelResetBtn.addEventListener('click', () => {
        passwordModal.style.display = 'none';
        passwordInput.value = '';
    });
    
    saveScoreBtn.addEventListener('click', () => {
        const name = playerNameInput.value.trim();
        if (name) {
            saveScore(name, timer, moves);
            playerForm.style.display = 'none';
            playerNameInput.value = '';
            startBtn.disabled = false;
        } else {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è');
        }
    });
    
    // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    initGame();
    loadOnlineLeaderboard();
});